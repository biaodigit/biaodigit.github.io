<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>罗文迪的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-02T08:12:17.012Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>biaodigit</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Next.js源码解析————启动命令篇</title>
    <link href="http://yoursite.com/2020/01/18/4/"/>
    <id>http://yoursite.com/2020/01/18/4/</id>
    <published>2020-01-18T01:45:54.000Z</published>
    <updated>2020-03-02T08:12:17.012Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Next.js</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Next.js&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Next.js+Egg.js配置</title>
    <link href="http://yoursite.com/2020/01/07/3/"/>
    <id>http://yoursite.com/2020/01/07/3/</id>
    <published>2020-01-07T14:01:19.000Z</published>
    <updated>2020-03-02T08:19:12.380Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Next-js简介"><a href="#Next-js简介" class="headerlink" title="Next.js简介"></a>Next.js简介</h2><p>Next.js作为<a href="https://reactjs.org/docs/create-a-new-react-app.html#nextjs" target="_blank" rel="noopener">React官方钦定</a>的SSR轻量级框架，有以下几个特性：</p><ul><li>开箱即用，支持0配置开发</li><li>支持约定式路由</li><li>支持自定义服务端路由，可以配合其他Node框架使用</li><li>渐进式babel和webpack配置</li><li>支持客户端渲染</li><li>社区活跃，团队不太监</li><li>对前端新技术支持较为全面，比如AMP、TypeScript、PWA、Serverless等</li></ul><p>在Nemo FE以React为主要开发框架的前提下SEO项目重构选择Next.js就非常合适</p><a id="more"></a><h2 id="Next-js自定义配置"><a href="#Next-js自定义配置" class="headerlink" title="Next.js自定义配置"></a>Next.js自定义配置</h2><p>官方文档在自定义服务端路由的例子中给出了一个demo，可以给后面和Egg.js配置提供参考性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createServer &#125; = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; parse &#125; = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"><span class="keyword">const</span> next = <span class="built_in">require</span>(<span class="string">'next'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dev = process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line"><span class="keyword">const</span> app = next(&#123; dev &#125;)</span><br><span class="line"><span class="keyword">const</span> handle = app.getRequestHandler()</span><br><span class="line"></span><br><span class="line">app.prepare().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> parsedUrl = parse(req.url, <span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">const</span> &#123; pathname, query &#125; = parsedUrl</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pathname === <span class="string">'/a'</span>) &#123;</span><br><span class="line">      app.render(req, res, <span class="string">'/b'</span>, query)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname === <span class="string">'/b'</span>) &#123;</span><br><span class="line">      app.render(req, res, <span class="string">'/a'</span>, query)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      handle(req, res, parsedUrl)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).listen(<span class="number">3000</span>, err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'&gt; Ready on http://localhost:3000'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面的代码大概可以拆分成两个部分:<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dev = process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line"><span class="keyword">const</span> app = next(&#123; dev &#125;)</span><br><span class="line"><span class="keyword">const</span> handle = app.getRequestHandler()</span><br></pre></td></tr></table></figure><p>1.对next进行实例化，缓存环境变量以及一个处理页面资源请求的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.prepare().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2.当前期的实例和方法都准备好以后，下一步就是启动服务了，启动http服务之前先跑了一次<code>app.prepare</code>，而这个<code>app.prepare</code>是干什么用的呢，在这里可以先不急着去看prepare的源码，可以先去看看next官方脚手架是怎么跑起来的。</p><p>官方给出的命令配置如下：<br><img src="/2020/01/07/3/01.png" alt="01.png"><br>以<code>dev</code>为例，可以从next源码中找到对应的<code>cli/next-dev.ts</code>文件</p><blockquote><p>next-dev.ts</p></blockquote><p><img src="/2020/01/07/3/02.png" alt="02.png"><br>可以看到在<code>dev</code>启动命令同样调用了<code>app.prepare</code>这个方法，而前面那个<code>startServer</code>又是个什么东西，可以根据路径找到对应文件</p><blockquote><p>start-server.ts</p></blockquote><p><img src="/2020/01/07/3/03.png" alt="03.png"></p><p>看到这里就大概知道官方启动next的流程是先启动一个http服务，启动完后再去调用<code>app.prepare</code>方法，除了<code>dev</code>生产模式下的<code>start</code>也是同样流程，所以这个时候prepare内部是干什么的已经不需要去知道，源码怎么做这边自定义启动next就怎么做</p><p>至于是先创建http服务还是先跑<code>app.prepare</code>方法也不重要，只要在开始做路由匹配前都启动完成即可</p><h2 id="Egg-js自定义配置"><a href="#Egg-js自定义配置" class="headerlink" title="Egg.js自定义配置"></a>Egg.js自定义配置</h2><p>Egg.js自定义配置较简单，只需要在根目录新建一个<code>app.js</code>，调用<code>beforeStart</code>即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (app) =&gt; &#123;</span><br><span class="line">    app.beforeStart(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">       ...      </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>beforeStart</code>定义</p><blockquote><p>所有的配置已经加载完毕,可以用来加载应用自定义的文件，启动自定义的服务</p></blockquote><h2 id="搭建思路"><a href="#搭建思路" class="headerlink" title="搭建思路"></a>搭建思路</h2><blockquote><p>本文采用的Next9.x版本进行配置，已成功进行上线验证</p></blockquote><p>Ok，在分析完Next.js和Egg.js的自定义配置过程后，下面开始思考下🤔怎么把这两个官方团队相互排斥的框架结合在一起做成自己想要的配置</p><p>先捋一下搭建思路：</p><ul><li>首先路由是由Egg控制而不是使用Next的约定式路由，因为契合SEO需求一个页面可能被多个路由使用，所以用Egg控制路由更合适</li><li>既然项目用Egg启动也就是Next需要自定义在Egg启动的时候实例化，实例化要做两件事情：<ul><li>1.自定义一个render方法然后挂载在上Egg上，因为View层渲染是由Next去完成，然后通过的Egg的Controller返回给客户端</li><li>2.上文提到Next有一个<code>getRequestHandler</code>的方法用于处理路由和静态文件，放到这里路由是不用处理因为这事是Egg做的，但是静态资源还是要由Next做的，所以也应该想办法把这个方法挂到Egg上</li></ul></li><li>考虑到SEO需求需要使用Google的<code>AMP</code>框架，鉴于之前使用Egg模版引擎<code>Nunjucks</code>在写H5页和AMP页的时候HTML和CSS都需要分开写&amp;&amp;打包，既然Next支持AMP，为了体现重构的价值争取用最少的代码实现一步到位</li></ul><p>大概就是这三点是整个搭建过程需要考虑的</p><h2 id="Egg-js-Next-js-Initialize-Combine"><a href="#Egg-js-Next-js-Initialize-Combine" class="headerlink" title="Egg.js+Next.js Initialize Combine"></a>Egg.js+Next.js Initialize Combine</h2><p>首先使用egg脚手架初始化项目</p><blockquote><p>egg-init [project] –type=simple</p></blockquote><p>按上面说的到的思路在Egg启动的时候对Next进行实例化，那么先来建一个<code>ssr.js</code>，对<code>next</code>的实例化主要分为3步：</p><ul><li><code>next</code>实例化，然后调用<code>prepare</code>方法</li><li>因为需要通过<code>next</code>生成<code>html模版</code>，已经不需要使用Egg的<code>render</code>方法，所以要自行封装<code>renderTsx</code>方法，方法内部调用<code>render</code>方法返回渲染好的<code>html模版</code></li><li>然后把<code>renderTsx</code>方法挂载到Egg的<code>ctx</code>上</li></ul><blockquote></blockquote><blockquote><p>server/ssr.ts</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Application&#125; <span class="keyword">from</span> <span class="string">'egg'</span></span><br><span class="line"><span class="keyword">const</span> next = <span class="built_in">require</span>(<span class="string">'next'</span>)</span><br><span class="line"><span class="keyword">const</span> dev = process.env.NODE_ENV !== <span class="string">'production'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (app:Application) =&gt; &#123;</span><br><span class="line">  <span class="comment">// next实例化</span></span><br><span class="line">  <span class="keyword">const</span> nextServer = next(&#123; dev &#125;);</span><br><span class="line">  <span class="comment">// 缓存getRequestHander方法</span></span><br><span class="line">  <span class="keyword">const</span> requestHandler = nextServer.getRequestHandler();</span><br><span class="line">  <span class="comment">// 按照上面分析先调用prepare方法</span></span><br><span class="line">  <span class="keyword">await</span> nextServer.prepare();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> renderTsx = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> ctx = <span class="keyword">this</span>;</span><br><span class="line">      <span class="comment">// 调用nextServer的render方法，里面传入的page路径和参数都通过在Egg端传入</span></span><br><span class="line">      <span class="keyword">const</span> html = <span class="keyword">await</span> nextServer.render(</span><br><span class="line">          ctx.req,</span><br><span class="line">          ctx.res,</span><br><span class="line">          <span class="string">`/<span class="subst">$&#123;options.page&#125;</span>`</span>,</span><br><span class="line">          options.props</span><br><span class="line">      );</span><br><span class="line">      <span class="comment">// 模版挂载到body上</span></span><br><span class="line">      ctx.body = html;</span><br><span class="line">      <span class="keyword">return</span> html</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用Object.defineProerty方法挂载renderTsx方法</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(app.context, <span class="string">'renderTsx'</span>, &#123;</span><br><span class="line">      writable: <span class="literal">false</span>,</span><br><span class="line">      configurable: <span class="literal">false</span>,</span><br><span class="line">      value: renderTsx</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用Object.defineProerty方法挂载requestHandler方法，在Egg中间件调用</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(app.context, <span class="string">'requestHandler'</span>, &#123;</span><br><span class="line">      writable: <span class="literal">false</span>,</span><br><span class="line">      configurable: <span class="literal">false</span>,</span><br><span class="line">      value: requestHandler</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据Egg.js文档自定义Egg服务需要在根目录建一个<code>app.ts</code>，并要默认导出一个类，然后引入刚才在<code>ssr.ts</code>中封装的启动函数</p><blockquote><p>app.ts</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Application &#125; <span class="keyword">from</span> <span class="string">'egg'</span></span><br><span class="line"><span class="keyword">const</span> SSR = <span class="built_in">require</span>(<span class="string">'./server/ssr'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">app:Application</span>) =&gt;</span> &#123;</span><br><span class="line">    app.beforeStart(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">       <span class="keyword">await</span> SSR(app)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面说到<code>requestHandler</code>在挂载到<code>ctx</code>上后需要在中间件调用，为什么要在中间件调用呢，</p><p>通过阅读Next的源码分析了<code>getRequestHandler</code>调用的全过程，简单总结下调用的过程大概是：</p><ul><li>Next在启动Node服务<code>createServer</code>后会调用<code>getRequestHandler</code></li><li>调用后截取全部请求URL(这个URL不单指只在浏览器输入的，还包括其他静态脚本文件)，同时与内部的<code>Router</code>数组做一次匹配</li><li>如果匹配到对应的前缀比如<code>/_next/static/</code>后会回调<code>Router</code>中的<code>fn</code>方法，而这个<code>fn</code>做的事情不限于渲染页面、页面热更替等等</li></ul><p>既然要截取全部请求URL那放在中间件就再适合不过了，至于为什么要手动挂载到Egg的中间件上，原因也很简单，因为我们并没有启动Next内部的Node服务，所以要手动调用挂载这个方法</p><blockquote><p>middleware/next.ts</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Application &#125; <span class="keyword">from</span> <span class="string">'egg'</span></span><br><span class="line"><span class="keyword">const</span> &#123; parse &#125; = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">app: Application</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> isNextStatic = <span class="regexp">/\/_next\//</span>.test(ctx.url)</span><br><span class="line">        <span class="keyword">if</span> (isNextStatic) &#123;</span><br><span class="line">            <span class="keyword">const</span> reqeustUrl = parse(ctx.url, <span class="literal">true</span>)</span><br><span class="line">            <span class="keyword">await</span> ctx.requestHandler(ctx.req, ctx.res, reqeustUrl)</span><br><span class="line">        &#125; &#123;</span><br><span class="line">            <span class="keyword">await</span> next()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>config</code>文件夹中配置<code>config.default.ts</code>文件，默认开启中间件</p><blockquote><p>config/config.default.ts</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">appInfo: EggAppInfo</span>) =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  config.middleware = [<span class="string">'next'</span>]</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> &#123; ...config &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>看到这里看官们应该会有一个疑问🤔️，为什么egg的自定义配置用的是<code>common.js</code>规范而不是<code>esmodule</code>规范，在我的<a href="https://biaodigit.github.io/2020/01/07/2/" target="_blank" rel="noopener">Next.js使用总结</a>文章中有总结原因，在这里就不再赘述，欢迎各位看官去看一看，说不定还有一些你现在使用Next.js的一些疑难杂症（手动斜眼。</p><p>至此Next.js+Egg.js配置已基本结束，楼主还是会一直持续关注Next.js的变化，顺便写一些Next.js源码解析文章，毕竟工欲善其事必先利其器，灵活运用一个框架了解其原理是必不可少的，所以敬请期待🎉🎉🎉</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Next-js简介&quot;&gt;&lt;a href=&quot;#Next-js简介&quot; class=&quot;headerlink&quot; title=&quot;Next.js简介&quot;&gt;&lt;/a&gt;Next.js简介&lt;/h2&gt;&lt;p&gt;Next.js作为&lt;a href=&quot;https://reactjs.org/docs/create-a-new-react-app.html#nextjs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;React官方钦定&lt;/a&gt;的SSR轻量级框架，有以下几个特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开箱即用，支持0配置开发&lt;/li&gt;
&lt;li&gt;支持约定式路由&lt;/li&gt;
&lt;li&gt;支持自定义服务端路由，可以配合其他Node框架使用&lt;/li&gt;
&lt;li&gt;渐进式babel和webpack配置&lt;/li&gt;
&lt;li&gt;支持客户端渲染&lt;/li&gt;
&lt;li&gt;社区活跃，团队不太监&lt;/li&gt;
&lt;li&gt;对前端新技术支持较为全面，比如AMP、TypeScript、PWA、Serverless等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在Nemo FE以React为主要开发框架的前提下SEO项目重构选择Next.js就非常合适&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Next.js使用总结</title>
    <link href="http://yoursite.com/2020/01/07/2/"/>
    <id>http://yoursite.com/2020/01/07/2/</id>
    <published>2020-01-07T13:28:09.000Z</published>
    <updated>2020-03-02T08:17:51.294Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文会总结使用Next.js在具体业务场景下碰到的一些大坑以及具体解决方案，在开始总结前先表达下对ZEIT团队的敬佩，感谢🙏他们开源出一款优秀的同构框架，解救了曾经蛋疼的陷在使用模版引擎做SSR项目的开发者(比如我)，通过Next.js重构后的项目更加轻量化，性能上也有大幅度的提升，如下图</p><a id="more"></a><p><strong>重构前</strong>：<br><img src="/2020/01/07/2/01.png" alt="01.png"><br><strong>重构后</strong>：<br><img src="/2020/01/07/2/02.png" alt="02.png"></p><p>性能数据是通过ABTest使用开源的<a href="https://github.com/WarrenJones/nemetric" target="_blank" rel="noopener">Nemetric</a>抓取<code>FetchTime</code>和<code>FirstContentfulPaint</code>两个性能指标，然后传到kibana上对比，对比后的性能数据在不同纬度下提升<strong>20%-30%</strong>，这里多提一句可能很多人对优化后的效果很难感知到，或者优化的价值在哪，但实际上根据谷歌发布的<a href="https://developers.google.com/web/fundamentals/performance/why-performance-matters" target="_blank" rel="noopener">性能为何至关重要</a>，真的是一寸光阴一寸金，所以在看到这个数据对比后我的感觉就是：</p><img src="/2020/01/07/2/04.gif"><p>前言讲完，就开始讲讲碰到的坑了</p><h2 id="与Egg-js结合使用"><a href="#与Egg-js结合使用" class="headerlink" title="与Egg.js结合使用"></a>与Egg.js结合使用</h2><p>Next.js官方github有一个example library，里面主要是Next.js与其他技术结合使用的一些demo，但没有与Egg.js结合的例子，而在Egg.js官方github有人提过<a href="https://github.com/eggjs/egg/issues/3393" target="_blank" rel="noopener">issue</a>Egg.js怎样去接入Next.js，官方给出的答复是Koa/Egg的底层实现与基于Express实现的Next有冲突，不建议两者结合使用。所以网上对如何把Egg.js和Next.js一起使用的资料比较稀缺</p><p><strong>解决方案</strong>:<br><a href="https://biaodigit.github.io/2020/01/07/3/" target="_blank" rel="noopener">Next.js+Egg.js配置</a></p><p>上面的搭建配置是经阅读了一点Next.js源码探索出来的，现在已经可以完整支持我司10万DAU的推广页正常运行。</p><h2 id="按页面分割样式"><a href="#按页面分割样式" class="headerlink" title="按页面分割样式"></a>按页面分割样式</h2><p>在开发的时候由于VidMate Sites是多页应用，按预期是每个页面只需要加载对应页面的css文件和公共css文件，但是查看network的时候发现每一个页面都是加载同一个styles.css文件</p><p>经过查看Next的css插件<code>next-css</code><a href="https://github.com/zeit/next-plugins/blob/master/packages/next-css/css-loader-config.js" target="_blank" rel="noopener">源码</a>定位到问题在哪</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!isServer) &#123;</span><br><span class="line">  config.optimization.splitChunks.cacheGroups.styles = &#123;</span><br><span class="line">    name: <span class="string">'styles'</span>,</span><br><span class="line">    test: <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`\\.+(<span class="subst">$&#123;[...fileExtensions].join(<span class="string">'|'</span>)&#125;</span>)$`</span>),</span><br><span class="line">    chunks: <span class="string">'all'</span>,</span><br><span class="line">    enforce: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面配置的含义是全部<code>fileExtensions</code>文件中引入的css文件全部抽取出来打包成<code>styles.css</code>， <code>fileExtensions</code>就是<code>webpack配置</code>中的<code>entry</code>这种做法对单页应用是很有用的，全部组件页面css文件集中成一个，原来的n个css文件请求减少至一个，但是对于多页应用来说这种分割方式是不适合的，因为跳转页面需要重新请求，这个时候需要做的是减少页面文件的体积，所以腾讯新闻使用<code>styled-jsx</code>应该也是这个原因</p><p><strong>解决方案</strong>:<br>使用<code>styled-jsx</code>方案，自动打包到每个页面对应的<code>js</code>中，但由于写<code>styled-jsx</code>是在<code>.tsx</code>中所以开发的时候不会有语法提示，所以可以用另一种方式引入scss文件转化为<code>styled-jsx</code>，需要在<code>next.config.js</code>中配置一下</p><blockquote><p>next.config.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">webpack: <span class="function">(<span class="params">config, &#123; defaultLoaders &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    config.module.rules.push(&#123;</span><br><span class="line">        test: <span class="regexp">/\.(sa|sc|c)ss$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">            defaultLoaders.babel,</span><br><span class="line">            &#123;</span><br><span class="line">                loader: <span class="built_in">require</span>(<span class="string">'styled-jsx/webpack'</span>).loader,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    type: <span class="string">'scoped'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'sass-loader'</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="兼容AMP"><a href="#兼容AMP" class="headerlink" title="兼容AMP"></a>兼容AMP</h2><p>由于我司做的是海外产品需要做谷歌SEO，所以就用到了谷歌开源的AMP框架，这个框架主要是针对谷歌进行优化，兼容AMP是目前使用Next最大的问题，因为这相当于把两个黑盒框架组合使用，难度是可想而知的</p><p>AMP也是一个对可配置性限制很大的框架，特别是对css只能嵌入不能引入，并且大小限制在50000Bytes内，然内嵌的自定义css要求以<code>&lt;style amp-custom&gt;.....&lt;/style&gt;</code>方式写入，如果缺少<code>amp-custom</code>就无法通过<code>amp validator</code>。而按正常的css开发套路需要对全局样式做一个通用定义，特别是移动端做rem适配需要对html文档做一个初始值font-size定义。</p><p>而很操蛋的在<code>&lt;Head/&gt;</code>组件使用<code>&lt;style&gt;...&lt;/style&gt;</code>定义全局样式是缺少上面提到的<code>amp-custom</code>属性的，</p><p>使用<code>&lt;style jsx global&gt;...&lt;/style&gt;</code>又可能出现初始样式加载失败的情况</p><p><strong>解决方案</strong>:<br>初始化样式存放在一个<code>reset</code>文件，然后在页面样式文件中引入。</p><h2 id="Typescript编译兼容"><a href="#Typescript编译兼容" class="headerlink" title="Typescript编译兼容"></a>Typescript编译兼容</h2><p>在使用Egg.js文档<a href="https://eggjs.org/zh-cn/tutorials/typescript.html" target="_blank" rel="noopener">关于typescript配置</a>的的时候当egg端使用<code>esmodule</code>规范开发会无法通过编译，经过我本人的踩坑，终于发现是tsconfig配置有关，是的没错，就跟下面这一行有关</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;module&quot;: &quot;esnext&quot;</span><br></pre></td></tr></table></figure><p><code>module</code>的意思是指定生成哪个模块系统代码，而因为nodejs执行的是<code>common.js</code>规范，所以改成<code>common.js</code>node端使用esmodule规范进行编译就没有问题，但悲剧的是这个配置next是强制性的，就算改成<code>common.js</code>也会变成<code>esnext</code>，so，先凑合着用：）</p><p>下面是我基于公司现有ts项目的tsconfig.json文件配置的两个tsconfig文件，为啥会有两个呢，因为在Nextv9版本中支持typescript0配置，所以会在编译中自动生成<code>tsconfig</code>配置，但是这个配置对编译egg端就不太行，所以只能用这种折中办法，<code>ts.egg.json</code>用于编译egg,<code>tsconfig.json</code>编译<code>next</code>，然后<code>tsconfig.json</code>去继承<code>ts.egg.json</code>，还有就是需要保持<code>typescript</code>版本在3.7以上，这样在开发和生产编译中就不会产生编译报错</p><blockquote><p>tsconfig.json</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;extends&quot;: &quot;./ts.egg.json&quot;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ts.egg.json </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;compileOnSave&quot;: true,</span><br><span class="line">  &quot;compilerOptions&quot;: &#123;</span><br><span class="line">    &quot;moduleResolution&quot;: &quot;node&quot;,</span><br><span class="line">    &quot;sourceMap&quot;: true,</span><br><span class="line">    &quot;removeComments&quot;: true,</span><br><span class="line">    &quot;noImplicitAny&quot;: false,</span><br><span class="line">    &quot;allowSyntheticDefaultImports&quot;: true,</span><br><span class="line">    &quot;lib&quot;: [&quot;es2015&quot;, &quot;es2016&quot;, &quot;es2017.object&quot;, &quot;dom&quot;, &quot;es2018.promise&quot;, &quot;es2019&quot;],</span><br><span class="line">    &quot;jsx&quot;: &quot;preserve&quot;,</span><br><span class="line">    &quot;downlevelIteration&quot;: true,</span><br><span class="line">    &quot;target&quot;: &quot;es2017&quot;,</span><br><span class="line">    &quot;experimentalDecorators&quot;: true,</span><br><span class="line">    &quot;emitDecoratorMetadata&quot;: true,</span><br><span class="line">    &quot;charset&quot;: &quot;utf8&quot;,</span><br><span class="line">    &quot;allowJs&quot;: false,</span><br><span class="line">    &quot;noEmitOnError&quot;: false,</span><br><span class="line">    &quot;allowUnreachableCode&quot;: false,</span><br><span class="line">    &quot;allowUnusedLabels&quot;: false,</span><br><span class="line">    &quot;noFallthroughCasesInSwitch&quot;: true,</span><br><span class="line">    &quot;skipLibCheck&quot;: true,</span><br><span class="line">    &quot;skipDefaultLibCheck&quot;: true,</span><br><span class="line">    &quot;importHelpers&quot;: true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;exclude&quot;: [</span><br><span class="line">    &quot;app/public&quot;,</span><br><span class="line">    &quot;node_modules*&quot;,</span><br><span class="line">    &quot;dist/*&quot;,</span><br><span class="line">    &quot;build/*&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产编译的时候需要先把egg自定义配置(<code>app.ts</code>和<code>ssr.ts</code>)打包编译，推荐使用<code>npm run local-tsc</code>进行本地编译，打包到线上服务器后再使用<code>npm run tsc</code>编译<code>egg</code>端的业务代码</p><blockquote><p>package.json</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;tsc&quot;: &quot;ets &amp;&amp; tsc -p ts.egg.json&quot;,</span><br><span class="line">  &quot;local-tsc&quot;: &quot;tsc app.ts &amp;&amp; tsc ./server/ssr.ts&quot;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="其他总结将持续更新，敬请期待～～"><a href="#其他总结将持续更新，敬请期待～～" class="headerlink" title="其他总结将持续更新，敬请期待～～"></a>其他总结将持续更新，敬请期待～～</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文会总结使用Next.js在具体业务场景下碰到的一些大坑以及具体解决方案，在开始总结前先表达下对ZEIT团队的敬佩，感谢🙏他们开源出一款优秀的同构框架，解救了曾经蛋疼的陷在使用模版引擎做SSR项目的开发者(比如我)，通过Next.js重构后的项目更加轻量化，性能上也有大幅度的提升，如下图&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>抓取和分析Node端性能</title>
    <link href="http://yoursite.com/2020/01/06/1/"/>
    <id>http://yoursite.com/2020/01/06/1/</id>
    <published>2020-01-06T14:37:55.000Z</published>
    <updated>2020-01-10T14:08:17.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在做性能优化的时候关注的重点一般是web端的性能，但在有Node作为中间层使用的情况下Node端的性能同样需要去关注。</p><p>比如遇到网络请求慢的情况，原因除了网速问题以外可能也是Node端响应时间较长，所以就需要去抓取出性能耗费点在哪里。</p><a id="more"></a><h2 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h2><p>服务端的性能指标比较多，所以我们只需要关注RT和QPS这两个影响页面性能和服务器消耗的就行了</p><ul><li>RT：响应时长，系统对请求作出的响应时间(单次请求耗时)</li><li>QPS：单台机器每秒处理查询数量<br>QPS的统计方式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QPS = 总请求数 / ( 进程总数 * 请求时间 )</span><br></pre></td></tr></table></figure></li></ul><p>假如一个请求的RT从500ms降低到100ms，那么理论上QPS就可以提升4倍，以前需要五台机器才能扛住的流量现在只需要一台，这样可以在减少响应时间的时候同时减少服务器资源消耗</p><h2 id="抓取Node端性能"><a href="#抓取Node端性能" class="headerlink" title="抓取Node端性能"></a>抓取Node端性能</h2><p>那应该怎样去抓取Node端请求的RT呢，Node本身是自带分析profile的，但是它导出的是日志分析，不太好判断性能消耗点在什么地方</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Concurrency Level:      20</span><br><span class="line">Time taken for tests:   46.932 seconds</span><br><span class="line">Complete requests:      250</span><br><span class="line">Failed requests:        0</span><br><span class="line">Keep-Alive requests:    250</span><br><span class="line">Total transferred:      50250 bytes</span><br><span class="line">HTML transferred:       500 bytes</span><br><span class="line">Requests per second:    5.33 [#/sec] (mean)</span><br><span class="line">Time per request:       3754.556 [ms] (mean)</span><br><span class="line">Time per request:       187.728 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          1.05 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%   3755</span><br><span class="line">  66%   3804</span><br><span class="line">  75%   3818</span><br><span class="line">  80%   3825</span><br><span class="line">  90%   3845</span><br><span class="line">  95%   3858</span><br><span class="line">  98%   3874</span><br><span class="line">  99%   3875</span><br><span class="line"> 100%   4225 (longest request)</span><br></pre></td></tr></table></figure><p>所以我们可以用<a href="https://www.npmjs.com/package/v8-profiler-next" target="_blank" rel="noopener">v8-profiler-next</a>，这个插件可以对CPU和堆内存进行抓取，因为我们想要的是请求耗时的数据所以只抓CPU就行了。</p><p>在开发/测试环境下还需要使用<a href="https://www.npmjs.com/package/loadtest" target="_blank" rel="noopener">loadtest</a>压力测试工具做一次CPU密集计算获取耗时平均值。</p><p>以电影站请求为例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router</span></span><br><span class="line"><span class="comment">// 首页请求api</span></span><br><span class="line">router.get(<span class="string">'/api/home/movie-list'</span>, controller.home.getMovieList)</span><br><span class="line"><span class="comment">// cpu数据上报</span></span><br><span class="line">router.get(<span class="string">'/api/cpuprofile'</span>,controller.home.exportCPUProfile)</span><br><span class="line"></span><br><span class="line"><span class="comment">// controller/home</span></span><br><span class="line"><span class="keyword">const</span> profiler = <span class="built_in">require</span>(<span class="string">'v8-profiler-next'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">async</span> getMovieList(ctx) &#123;</span><br><span class="line">  <span class="keyword">return</span> ctx.helper.commonStr(&#123; ctx, <span class="attr">type</span>: “<span class="keyword">get</span>”, serverName: “home”, fnName: “getHomeList” &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// service/home</span><br><span class="line">async getHomeList(opt: &#123; domain: string, <span class="attr">isAmp</span>: string &#125;) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; domain, isAmp &#125; = opt</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> url = <span class="keyword">this</span>.ctx.helper.parseParam(&#123;</span><br><span class="line">      auth: <span class="keyword">this</span>.app.config.apiAuth,</span><br><span class="line">      domain</span><br><span class="line">    &#125;, API.MOVIE_HOME_LIST_URL)</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> data: any = <span class="keyword">await</span> <span class="keyword">this</span>.ctx.service.mc.getMC(url)</span><br><span class="line">      ...</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      ..</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// controller/home</span></span><br><span class="line"><span class="keyword">async</span> exportCPUProfile() &#123;</span><br><span class="line">    profiler.startProfiling(<span class="string">'CPU profile'</span>)</span><br><span class="line">    <span class="comment">//Stop Profiling after default time 60s</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> profile = profiler.stopProfiling()</span><br><span class="line">      profile.export()</span><br><span class="line">        .pipe(fs.createWriteStream(<span class="string">`cpuprofile-<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>.cpuprofile`</span>))</span><br><span class="line">        .on(<span class="string">'finish'</span>, () =&gt; profile.delete())</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'finish'</span>)</span><br><span class="line">    &#125;, <span class="number">60000</span>)</span><br><span class="line">    <span class="keyword">this</span>.ctx.body = &#123;</span><br><span class="line">      status: <span class="string">'success'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>然后开两个终端分别运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://127.0.0.1:8083/api/cpuprofile</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loadtest http://127.0.0.1:8083/api/home/movie-list/?domain=movierulz.video&amp;&amp;isAmp=false -n 100</span><br></pre></td></tr></table></figure><p>结束抓取后导出的<code>.cpuprofile</code>文件我们是不能直接去看的，还要通过<strong>Chrome devtools</strong>提供的CPU分析页面展示抓取到的数据。<br><img src="/2020/01/06/1/01.png" alt="01.png"><br>进入<strong>JavaScript Profiler</strong>页面后点击<strong>Load</strong>按钮导入上面的profile文件就能得到分析结果。<br><img src="/2020/01/06/1/02.png" alt="02.png"><br>分析结果有两个指标：</p><ul><li><strong>Self Time</strong>: 函数调用所耗费的时间，仅包含函数本身的声明，不包含任何子函数的执行时间。</li><li><strong>Total Time</strong>: 函数调用所耗费的总时间，包含函数本身的声明及所有子函数执行时间</li></ul><p>所以只需要看<strong>Total Time</strong>即可，然后根据<strong>Total Time</strong>去定位问题作出具体的优化措施。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1.<a href="https://yq.aliyun.com/articles/694994?spm=a2c4e.11155435.0.0.43da6154bJgrQM" target="_blank" rel="noopener">Node.js 应用故障排查手册 —— 正确打开 Chrome devtools</a><br>2.<a href="https://xiaozhuanlan.com/Nodejs-Guide/8209375641" target="_blank" rel="noopener">使用 v8-profiler 分析 CPU 的使用情况</a><br>3.<a href="https://juejin.im/entry/5a3b46676fb9a04512391cd1" target="_blank" rel="noopener">React同构与极致的性能优化</a><br>4.<a href="https://blog.51cto.com/qiangsh/1979617" target="_blank" rel="noopener">QPS、PV 、RT（响应时间）之间的关系</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在做性能优化的时候关注的重点一般是web端的性能，但在有Node作为中间层使用的情况下Node端的性能同样需要去关注。&lt;/p&gt;
&lt;p&gt;比如遇到网络请求慢的情况，原因除了网速问题以外可能也是Node端响应时间较长，所以就需要去抓取出性能耗费点在哪里。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
